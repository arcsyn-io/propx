package gen // import "github.com/lucaskalb/rapidx/gen"

File: gen/comb.go

File: gen/int.go

Package gen provides generators for property-based testing in Go. It includes
generators for various data types and utilities for creating custom generators
with shrinking capabilities.

CONSTANTS

const (
	// AlphabetLower contains lowercase letters a-z.
	AlphabetLower = "abcdefghijklmnopqrstuvwxyz"

	// AlphabetUpper contains uppercase letters A-Z.
	AlphabetUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

	// AlphabetAlpha contains both lowercase and uppercase letters.
	AlphabetAlpha = AlphabetLower + AlphabetUpper

	// AlphabetDigits contains digits 0-9.
	AlphabetDigits = "0123456789"

	// AlphabetAlphaNum contains letters and digits.
	AlphabetAlphaNum = AlphabetAlpha + AlphabetDigits

	// AlphabetASCII contains all printable ASCII characters.
	AlphabetASCII = AlphabetAlphaNum + " !\"#$%&'()*+,-./:;<=>?@[\\]^_{|}~"
)
    Common alphabet shortcuts (pure ASCII to avoid surprises)


FUNCTIONS

func MaskCPF(raw string) string
    MaskCPF formats a raw CPF string with dots and dashes.

func SetShrinkStrategy(s string)
    SetShrinkStrategy sets the shrinking strategy for all generators. Valid
    strategies are "dfs" (depth-first search) and "bfs" (breadth-first search).
    Any other value defaults to "bfs".

func UnmaskCPF(s string) string
    UnmaskCPF removes all non-digit characters from a CPF string.

func ValidCPF(s string) bool
    ValidCPF checks if a string is a valid CPF number.


TYPES

type GenFunc[T any] struct {
	// Has unexported fields.
}
    GenFunc is a helper type for creating a Generator from a closure. It wraps a
    function that implements the Generator interface.

func (g GenFunc[T]) Generate(r *rand.Rand, sz Size) (T, Shrinker[T])
    Generate implements the Generator interface for GenFunc.

type Generator[T any] interface {
	// Generate produces a value and a shrinker function for that value.
	// The random number generator and size constraints are provided as parameters.
	Generate(r *rand.Rand, sz Size) (value T, shrink Shrinker[T])
}
    Generator is the public contract for all generators. It defines the
    interface that all generators must implement.

func ArrayOf[T any](elem Generator[T], n int) Generator[[]T]
    ArrayOf generates a slice of **exact** length n, using the element
    generator. It is "array-like": great when you need to simulate [N]T. Shrink:
    cannot remove elements; only tries local shrink at each position, exploring
    multiple branches (BFS/DFS) and deduplicating candidates.

func Bind[A, B any](ga Generator[A], f func(A) Generator[B]) Generator[B]
    Bind (flatMap): the output generator depends on the value generated in A.
    Shrinking: first tries to shrink in B; when exhausted, shrinks in A and
    regenerates B.

func Bool() Generator[bool]
    Bool generates boolean values uniformly. Shrink: prioritizes reducing to
    false (smaller counterexample by convention).

func CPF(masked bool) Generator[string]
    CPF generates valid CPF numbers; masked controls the format.

func CPFAny() Generator[string]
    CPFAny generates CPF numbers with 50/50 chance of being masked or unmasked.

func Const[T any](v T) Generator[T]
    Const always returns the same value (without shrinking).

func Filter[T any](g Generator[T], pred func(T) bool, maxTries int) Generator[T]
    Filter keeps only values that satisfy pred. Implements "rebase" in shrink:
    when accepting, shrinks on top of the new minimum ensuring that the next
    candidates also satisfy the predicate.

func Float32(size Size) Generator[float32]
    Float32 generates float32 values with automatic range based on Size.
    Default: [-100, 100]. Does not include NaN/Inf.

func Float32Range(min, max float32, includeNaN, includeInf bool) Generator[float32]
    Float32Range generates float32 in [min, max]; can optionally produce
    NaN/±Inf.

func Float64(size Size) Generator[float64]
    Float64 generates floats with automatic range based on Size. - If no Size
    is provided, uses range [-100, 100]. - Does not include NaN/Inf (focused on
    business numeric cases).

func Float64Range(min, max float64, includeNaN, includeInf bool) Generator[float64]
    Float64Range generates floats uniformly in [min, max] (inclusive on finite
    bounds). Parameters includeNaN/includeInf allow injecting special cases.

func From[T any](fn func(*rand.Rand, Size) (T, Shrinker[T])) Generator[T]
    From creates a Generator from a function that implements the Generator
    interface. This is a convenience function for creating custom generators.

func Int(size Size) Generator[int]
    Int generates integers with automatic range based on Size: - if sz.Max
    (or |sz.Min|) > 0: range := [-M, M], where M = max(|sz.Min|, |sz.Max|) -
    otherwise, uses default range [-100, 100]. Example: prop.ForAll(t, cfg,
    gen.Int(gen.Size{Max: 1000})) ...

func Int64(size Size) Generator[int64]
    Int64 generates 64-bit integers with automatic range based on Size. If no
    Size is provided, uses [-100, 100].

func Int64Range(min, max int64) Generator[int64]
    Int64Range generates int64 uniformly in the range [min, max] (inclusive).

func IntRange(min, max int) Generator[int]
    IntRange generates integers uniformly in the range [min, max] (inclusive).
    Ignores sz for the range (useful when you want explicit control).

func Map[A, B any](ga Generator[A], f func(A) B) Generator[B]
    Map applies f: A -> B preserving shrinking (maps A's candidates).

func OneOf[T any](gs ...Generator[T]) Generator[T]
    OneOf chooses uniformly from one of the generators.

func SliceOf[T any](elem Generator[T], size Size) Generator[[]T]
    SliceOf generates []T from an element generator. - size.Min/Max control the
    length (default Min=0, Max=16). Shrink:

        (1) remove large blocks (half, quarter, ...) → remove indices
        (2) remove isolated element (right→left)
        (3) try shrink on elements (propagating accept)

func String(alphabet string, size Size) Generator[string]
    String generates strings using an alphabet (set of runes) and a Size.
    - If size.Min/Max = 0, uses default: Min=0, Max=32. - If alphabet is empty,
    uses AlphabetAlphaNum.

func StringASCII(size Size) Generator[string]
    StringASCII generates strings using all printable ASCII characters.

func StringAlpha(size Size) Generator[string]
    Syntactic sugar functions for common string generators StringAlpha generates
    strings using only alphabetic characters.

func StringAlphaNum(size Size) Generator[string]
    StringAlphaNum generates strings using alphanumeric characters.

func StringDigits(size Size) Generator[string]
    StringDigits generates strings using only digits.

func Uint(size Size) Generator[uint]
    Uint generates unsigned integers with automatic range based on Size.
    If no Size is provided, uses [0, 100].

func Uint64(size Size) Generator[uint64]
    Uint64 generates unsigned 64-bit integers with automatic range based on
    Size. If nothing is provided, uses [0, 100].

func Uint64Range(min, max uint64) Generator[uint64]
    Uint64Range generates uint64 uniformly in the range [min, max] (inclusive).

func UintRange(min, max uint) Generator[uint]
    UintRange generates uint uniformly in the range [min, max].

func Weighted[T any](weight func(T) float64, gs ...Generator[T]) Generator[T]
    Weighted chooses a generator based on dynamic weights (by value).
    The strategy here captures which index was selected to be able to "shrink"
    reusing the shrinker of the chosen generator. Optionally, in shrinking
    it also tries to migrate to neighbors (other indices) — controlled by
    `tryNeighbors`.

type Shrinker[T any] func(accept bool) (next T, ok bool)
    Shrinker proposes "smaller" candidates during the shrinking process.
    The accept parameter indicates whether the PREVIOUS candidate was accepted
    (i.e., it reproduced the failure). This allows the shrinker to "rebase" and
    generate new neighbors from the new minimum.

type Size struct {
	// Min is the minimum bound for generated values.
	Min int
	// Max is the maximum bound for generated values.
	Max int
}
    Size controls the scale and limits of generators. It defines the minimum and
    maximum bounds for generated values.

type T[T any] = Generator[T]
    T is an optional alias for Generator[T] for compatibility.

